import { Telegraf, Context } from 'telegraf';
import { message } from 'telegraf/filters';
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import * as dotenv from 'dotenv';
import * as readline from 'readline';
import { JsonFileStorage, IStorage } from './storage'; // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü–µ–π —Ñ–∞–π–ª —ñ—Å–Ω—É—î

// --- –ü–†–û–°–£–ù–£–¢–ò–ô –õ–û–ì–ì–ï–† ---
const logger = {
  info: (message: string, ...args: any[]) => {
    console.log(`[${new Date().toISOString()}] [INFO]  `, message, ...args);
  },
  warn: (message: string, ...args: any[]) => {
    console.warn(`[${new Date().toISOString()}] [WARN]  `, message, ...args);
  },
  error: (message: string, error?: any, ...args: any[]) => {
    if (error) {
      console.error(`[${new Date().toISOString()}] [ERROR] `, message, error, ...args);
    } else {
      console.error(`[${new Date().toISOString()}] [ERROR] `, message, ...args);
    }
  },
};

// --- –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω—å –≤ –∫–æ–Ω—Å–æ–ª—ñ ---
function askQuestion(query: string): Promise<string> {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise(resolve => rl.question(query, ans => { rl.close(); resolve(ans); }));
}

// --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ---
dotenv.config();
const { API_ID, API_HASH, BOT_TOKEN, SOURCE_CHANNEL_USERNAME, SESSION_STRING } = process.env;
if (!API_ID || !API_HASH || !BOT_TOKEN || !SOURCE_CHANNEL_USERNAME) {
  throw new Error("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å API_ID, API_HASH, BOT_TOKEN, SOURCE_CHANNEL_USERNAME –≤ .env —Ñ–∞–π–ª—ñ!");
}
const apiId = parseInt(API_ID, 10);
const apiHash = API_HASH;
const stringSession = new StringSession(SESSION_STRING || '');

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ö–æ–≤–∏—â–∞ ---
const storage: IStorage = new JsonFileStorage('bot_subscriptions.json');

// --- –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º —Ä–æ–∑–º–æ–≤–∏ ---
const usersInAddMode = new Set<number>();

// --- –ß–ê–°–¢–ò–ù–ê 1: –ë–û–¢ –î–õ–Ø –°–ü–û–í–Ü–©–ï–ù–¨ (Telegraf) ---
const notifierBot = new Telegraf(BOT_TOKEN);

async function sendNotification(text: string, chatIds: number[], messageId: number) {
  if (chatIds.length === 0) return;
  logger.info(`–ù–∞–¥—Å–∏–ª–∞—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è ${chatIds.length} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤...`);

  const notificationMessage = `üö® **–£–≤–∞–≥–∞! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –≤–æ–¥–æ–∫–∞–Ω–∞–ª—É!** üö®\n\n(–ú–æ–∂–ª–∏–≤–æ, —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≤–∞—à–æ—ó –≤—É–ª–∏—Ü—ñ)\n\n---\n${text}`;
  const sourceLink = `https://t.me/${SOURCE_CHANNEL_USERNAME!.replace('@', '')}/${messageId}`;

  const sendPromises = chatIds.map(chatId =>
      notifierBot.telegram.sendMessage(chatId, notificationMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –¥–∂–µ—Ä–µ–ª–∞', url: sourceLink }]
          ]
        }
      })
          .catch(err => {
            logger.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç ${chatId}:`, err);
            if (err.code === 403) {
              logger.warn(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${chatId} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞. –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.`);
              storage.removeSubscriber(chatId);
              storage.save();
            }
          })
  );
  await Promise.all(sendPromises);
  logger.info("–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
}

// --- –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–æ—é ---

notifierBot.start(async (ctx: Context) => {
  if (ctx.chat) {
    await ctx.reply('–í—ñ—Ç–∞—é! üëã –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –≤–æ–¥–æ–∫–∞–Ω–∞–ª—É.\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞–∑–≤—É –ø–µ—Ä—à–æ—ó –≤—É–ª–∏—Ü—ñ, –∑–∞ —è–∫–æ—é –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–µ–∂–∏—Ç–∏.');
    usersInAddMode.add(ctx.chat.id);
  }
});

notifierBot.command('addstreet', async (ctx: Context) => {
  if (ctx.chat) {
    await ctx.reply('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ, —è–∫—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.');
    usersInAddMode.add(ctx.chat.id);
  }
});

notifierBot.command('mystreets', async (ctx: Context) => {
  if (ctx.chat) {
    const streets = await storage.getStreetsFor(ctx.chat.id);
    if (streets.length > 0) {
      const streetList = streets.map(s => ` - \`${s}\``).join('\n');
      await ctx.replyWithMarkdown(`–í–∏ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤—É–ª–∏—Ü—ñ:\n${streetList}`);
    } else {
      await ctx.reply('–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≤—É–ª–∏—Ü—ñ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /addstreet, —â–æ–± –ø–æ—á–∞—Ç–∏.');
    }
  }
});

notifierBot.command('removestreet', async (ctx: Context) => {
  if (ctx.chat && ctx.message && 'text' in ctx.message) {
    const streetToRemove = ctx.message.text.split(' ').slice(1).join(' ').trim();

    if (!streetToRemove) {
      return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n`/removestreet –í–µ–ª–∏–∫–∞ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞`', { parse_mode: 'Markdown' });
    }

    const wasRemoved = await storage.removeStreet(ctx.chat.id, streetToRemove);
    await storage.save();

    if (wasRemoved) {
      await ctx.reply(`–í—É–ª–∏—Ü—é "${streetToRemove}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.`);
    } else {
      await ctx.reply(`–í—É–ª–∏—Ü—è "${streetToRemove}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É.`);
    }
  }
});

notifierBot.command('stop', async (ctx: Context) => {
  if (ctx.chat) {
    await storage.removeSubscriber(ctx.chat.id);
    await storage.save();
    await ctx.reply('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è. –í—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ —Ç–∞ —Å–ø–∏—Å–æ–∫ –≤—É–ª–∏—Ü—å –≤–∏–¥–∞–ª–µ–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start.');
  }
});

notifierBot.on(message('text'), async (ctx) => {
  const chatId = ctx.chat.id;

  if (usersInAddMode.has(chatId)) {
    const streetName = ctx.message.text.trim();
    if (streetName) {
      await storage.addStreet(chatId, streetName);
      await storage.save();
      usersInAddMode.delete(chatId);
      await ctx.reply(`‚úÖ –í—É–ª–∏—Ü—é "${streetName}" –¥–æ–¥–∞–Ω–æ! \n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å /addstreet, —â–æ–± –¥–æ–¥–∞—Ç–∏ —â–µ, –∞–±–æ /mystreets, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫.`);
    }
  } else {
    ctx.reply("–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—Å. –©–æ–± –¥–æ–¥–∞—Ç–∏ –≤—É–ª–∏—Ü—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addstreet.");
  }
});

// --- –ß–ê–°–¢–ò–ù–ê 2: –ö–õ–Ü–Ñ–ù–¢ –î–õ–Ø –ü–†–û–°–õ–£–•–û–í–£–í–ê–ù–ù–Ø (Telegram/MTProto) ---
async function main() {
  await storage.load();

  logger.info("–ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram –∫–ª—ñ—î–Ω—Ç...");
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => await askQuestion("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: "),
    password: async () => await askQuestion("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA: "),
    phoneCode: async () => await askQuestion("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤ Telegram: "),
    onError: (err) => logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞:", err),
  });
  logger.info("‚úÖ –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");

  const newSessionString = client.session.save();
  if (!SESSION_STRING && newSessionString) {
    logger.warn(`\n–í–ê–ñ–õ–ò–í–û! –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ü–µ–π —Ä—è–¥–æ–∫ —Å–µ—Å—ñ—ó —É –≤–∞—à–æ–º—É .env —Ñ–∞–π–ª—ñ —è–∫ SESSION_STRING:\n${newSessionString}\n`);
  }

  try {
    logger.info(`--- –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–æ –∫–∞–Ω–∞–ª—É ${SOURCE_CHANNEL_USERNAME} ---`);
    const [lastMessage] = await client.getMessages(SOURCE_CHANNEL_USERNAME, { limit: 1 });
    if (lastMessage && lastMessage.text) {
      logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:");
      logger.info(`"${lastMessage.text.substring(0, 200)}..."`);
    } else if (lastMessage) {
      logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–±–µ–∑ —Ç–µ–∫—Å—Ç—É, –º–æ–∂–ª–∏–≤–æ –º–µ–¥—ñ–∞).");
    } else {
      logger.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –∫–∞–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.");
    }
  } catch (error: any) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π SOURCE_CHANNEL_USERNAME –≤ .env —ñ —á–∏ –º–∞—î –∞–∫–∞—É–Ω—Ç –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É.", error);
  }
  logger.info("--------------------------------------------------\n");

  client.addEventHandler(async (event) => {
    const messageText = event.message?.message;
    const messageId = event.message?.id;

    if (!messageText || !messageId) return;

    const lowerCaseMessage = messageText.toLowerCase();

    logger.info(`–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #${messageId} –∑ –∫–∞–Ω–∞–ª—É...`);

    const allSubscriptions = await storage.getAllSubscriptions();
    const usersToNotify = new Set<number>();

    for (const [chatId, streets] of allSubscriptions.entries()) {
      for (const street of streets) {
        if (lowerCaseMessage.includes(street.toLowerCase())) {
          usersToNotify.add(chatId);
          break;
        }
      }
    }

    if (usersToNotify.size > 0) {
      logger.info(`–ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥–∏ –¥–ª—è ${usersToNotify.size} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.`);
      const chatIdsToNotify = Array.from(usersToNotify);
      await sendNotification(messageText, chatIdsToNotify, messageId);
    } else {
      logger.info("–ó–±—ñ–≥—ñ–≤ –¥–ª—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
  });

  await notifierBot.launch(() => logger.info("‚úÖ –ë–æ—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞–ø—É—â–µ–Ω–æ."));
  logger.info(`üéß –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É ${SOURCE_CHANNEL_USERNAME!.replace('@','')} —Ä–æ–∑–ø–æ—á–∞—Ç–æ...`);
}

// --- –û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ ---
async function gracefulShutdown(signal: string) {
  logger.info(`–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...`);
  await storage.save();
  notifierBot.stop(signal);
  process.exit(0);
}
process.once('SIGINT', () => gracefulShutdown('SIGINT'));
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));

main().catch(err => {
  logger.error("–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó:", err);
  process.exit(1);
});